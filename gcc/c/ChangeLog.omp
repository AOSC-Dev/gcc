2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-07-01  Tobias Burnus  <tobias@codesourcery.com>

	* c-parser.cc (c_parser_omp_target_enter_data,
	c_parser_omp_target_exit_data): Accept tofrom
	map-type modifier but use 'to' / 'from' internally.

2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-06-07  Jakub Jelinek  <jakub@redhat.com>

	* c-parser.cc (c_parser_omp_clause_linear): Parse OpenMP 5.2
	style linear clause modifiers.  Set
	OMP_CLAUSE_LINEAR_OLD_LINEAR_MODIFIER flag on the clauses when
	old style modifiers are used.
	* c-typeck.cc (c_finish_omp_clauses): Only reject linear clause
	with val modifier on simd or for if the old style modifiers are
	used.

2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-05-31  Jakub Jelinek  <jakub@redhat.com>

	* c-parser.cc (OMP_SCOPE_CLAUSE_MASK): Add firstprivate and allocate
	clauses.

2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-05-28  Jakub Jelinek  <jakub@redhat.com>

	* c-parser.cc (c_parser_omp_declare_target): If OMP_CLAUSE_LINK was
	seen first, use "%<to%>" or "%<enter%>" depending on
	OMP_CLAUSE_ENTER_TO of the current clause, otherwise use
	"%<to%> or %<enter%>" wording.

2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-05-27  Jakub Jelinek  <jakub@redhat.com>

	* c-parser.cc (c_parser_omp_clause_name): Parse enter clause.
	(c_parser_omp_all_clauses): For to clause on declare target, use
	OMP_CLAUSE_ENTER clause with OMP_CLAUSE_ENTER_TO instead of
	OMP_CLAUSE_TO_DECLARE clause.  Handle PRAGMA_OMP_CLAUSE_ENTER.
	(OMP_DECLARE_TARGET_CLAUSE_MASK): Add enter clause.
	(c_parser_omp_declare_target): Use OMP_CLAUSE_ENTER instead of
	OMP_CLAUSE_TO_DECLARE.
	* c-typeck.cc (c_finish_omp_clauses): Handle OMP_CLAUSE_ENTER instead
	of OMP_CLAUSE_TO_DECLARE, to OMP_CLAUSE_ENTER_TO use "to" as clause
	name in diagnostics instead of
	omp_clause_code_name[OMP_CLAUSE_CODE (c)].

2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-05-24  Jakub Jelinek  <jakub@redhat.com>

	PR c/105378
	* c-parser.cc (OMP_TASKWAIT_CLAUSE_MASK): Add nowait clause.

2022-07-04  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-05-17  Jakub Jelinek  <jakub@redhat.com>

	* c-parser.cc (c_parser_omp_clause_depend): Parse
	inoutset depend-kind.
	(c_parser_omp_depobj): Likewise.

2022-06-30  Tobias Burnus  <tobias@codesourcery.com>

	* c-parser.cc (c_parser_omp_requires): Add missing %<...%> in error.

2022-03-17  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-typeck.cc (handle_omp_array_sections_1): Add check to ensure
	that clause is a map.

2022-05-12  Jakub Jelinek  <jakub@redhat.com>

	Backport from mainline:
	2022-05-12  Jakub Jelinek  <jakub@redhat.com>

	* c-parser.cc (c_parse_init): Register omp_all_memory as keyword
	if flag_openmp.
	(c_parser_postfix_expression): Diagnose uses of omp_all_memory
	in postfix expressions.
	(c_parser_omp_variable_list): Handle omp_all_memory in depend
	clause.
	* c-typeck.cc (c_finish_omp_clauses): Handle omp_all_memory
	keyword in depend clause as null_pointer_node, diagnose invalid
	uses.

2022-06-17  Chung-Lin Tang  <cltang@codesourcery.com>

	Backport from mainline:
	2022-06-17  Chung-Lin Tang  <cltang@codesourcery.com>

	* c-parser.cc (c_parser_omp_clause_name): Add case for uses_allocators
	clause.
	(c_parser_omp_clause_uses_allocators): New function.
	(c_parser_omp_all_clauses): Add PRAGMA_OMP_CLAUSE_USES_ALLOCATORS case.
	(OMP_TARGET_CLAUSE_MASK): Add PRAGMA_OMP_CLAUSE_USES_ALLOCATORS to mask.
	* c-typeck.cc (c_finish_omp_clauses): Add case handling for
	OMP_CLAUSE_USES_ALLOCATORS.

2022-04-20  Andrew Stubbs  <ams@codesourcery.com>

	* c-parser.cc (c_parser_omp_requires): Check requires unified_address
	for conflict with -foffload-memory=shared.

2022-03-10  Andrew Stubbs <ams@codesourcery.com>

	Backport of the patch posted at
	https://gcc.gnu.org/pipermail/gcc-patches/2022-March/591351.html

	* c-parser.cc (c_parser_omp_requires): Check compatibility of
	-foffload-memory option with requires directive.

2022-02-24  Chung-Lin Tang  <cltang@codesourcery.com>

	* c-typeck.cc (handle_omp_array_sections): Add handling for
	creating array-reference base-pointer attachment clause.

2022-02-18  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-parser.cc (c_parser_omp_construct): Move handling of
	PRAGMA_OMP_METADIRECTIVE from here...
	(c_parser_pragma): ...to here.
	(analyze_metadirective_body): Check that the bracket nesting level
	is also zero before stopping the adding of tokens on encountering a
	close brace.
	(c_parser_omp_metadirective): Modify function signature and update.
	Do not assert on remaining tokens if there has been a parse error.

2022-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-parser.cc (omp_target_device_selectors): New.
	(c_parser_omp_context_selector): Accept 'target_device' selector set.
	Treat 'device_num' selector as expression.
	(c_parser_omp_context_selector_specification): Handle 'target_device'
	selector set.

2022-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-parser.cc (c_parser_skip_to_end_of_block_or_statement): Track
	bracket depth separately from nesting depth.

2022-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-parser.cc (c_parser_skip_to_end_of_block_or_statement): Handle
	parentheses in statement.
	(c_parser_omp_metadirective): New prototype.
	(c_parser_omp_context_selector): Add extra argument.  Allow
	non-constant expressions.
	(c_parser_omp_context_selector_specification): Add extra argument and
	propagate it to c_parser_omp_context_selector.
	(analyze_metadirective_body): New.
	(c_parser_omp_metadirective): New.
	(c_parser_omp_construct): Handle PRAGMA_OMP_METADIRECTIVE.

2021-08-19  Chung-Lin Tang  <cltang@codesourcery.com>

	* c-typeck.cc (handle_omp_array_sections_1): Robustify non-contiguous
	array check and reject non-DECL base-pointer cases as unsupported.

2021-02-02  Chung-Lin Tang  <cltang@codesourcery.com>

	* c-parser.cc (c_parser_declaration_or_fndef): Set
	OMP_REQUIRES_TARGET_USED in omp_requires_mask if function has
	"omp declare target" attribute.
	(c_parser_omp_target_data): Set OMP_REQUIRES_TARGET_USED in
	omp_requires_mask.
	(c_parser_omp_target_enter_data): Likewise.
	(c_parser_omp_target_exit_data): Likewise.
	(c_parser_omp_requires): Adjust to only mention "not implemented yet"
	for OMP_REQUIRES_DYNAMIC_ALLOCATORS.

2020-08-19  Sandra Loosemore  <sandra@codesourcery.com>

	Add a "combined" flag for "acc kernels loop" etc directives.

	* c-parser.cc (c_parser_oacc_loop): Set OACC_LOOP_COMBINED.

2020-03-27  Sandra Loosemore  <sandra@codesourcery.com>

	* c-decl.cc (c_unwrap_for_init): New.
	(finish_function): Call c_oacc_annotate_loops_in_kernels_regions.

2022-02-03  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-parser.ccc (c_parser_omp_clause_map): Update call to
	c_parser_omp_variable_list.
	(c_parser_omp_clause_to): Update call to c_parser_omp_var_list_parens.
	(c_parser_omp_clause_from): Likewise.

2018-12-13  Cesar Philippidis  <cesar@codesourcery.com>
	    Nathan Sidwell  <nathan@acm.org>
	    Julian Brown  <julian@codesourcery.com>

	* c-parser.c (c_parser_omp_variable_list): New c_omp_region_type
	argument.  Use it to specialize handling of OMP_CLAUSE_REDUCTION for
	OpenACC.
	(c_parser_oacc_data_clause): Add region-type argument.
	(c_parser_oacc_data_clause_deviceptr): Likewise.
	(c_parser_omp_clause_reduction): Change is_omp boolean parameter to
	c_omp_region_type.  Update call to c_parser_omp_variable_list.
	(c_parser_oacc_all_clauses): Update calls to
	c_parser_omp_clause_reduction.
	(c_parser_omp_all_clauses): Likewise.
	(c_parser_oacc_cache): Update call to c_parser_omp_var_list_parens.
	* c-typeck.c (c_finish_omp_clauses): Emit an error on orphan OpenACC
	gang reductions.  Suppress user-defined reduction error for OpenACC.

2020-04-19  Chung-Lin Tang  <cltang@codesourcery.com>

	PR other/76739

	* c-typeck.cc (handle_omp_array_sections_1): Add 'bool &non_contiguous'
	parameter, adjust recursive call site, add cases for allowing
	pointer based multi-dimensional arrays for OpenACC.
	(handle_omp_array_sections): Adjust handle_omp_array_sections_1 call,
	handle non-contiguous case to create dynamic array map.
